{
    "BubbleSort": [
        {
            "code": "n = len(arr)",
            "indent": 0
        },
        {
            "code": "for i in range(n-1):",
            "indent": 0
        },
        {
            "code": "for j in range(n-i-1):",
            "indent": 1
        },
        {
            "code": "if arr[j] > arr[j+1]:",
            "indent": 2
        },
        {
            "code": "arr[j], arr[j+1] = arr[j+1], arr[j]",
            "indent": 3
        }
    ],
    "InsertionSort": [
        {
            "code": "n = len(arr)",
            "indent": 0
        },
        {
            "code": "for step in range(1, n):",
            "indent": 0
        },
        {
            "code": "key = arr[step]",
            "indent": 1
        },
        {
            "code": "j = step - 1",
            "indent": 1
        },
        {
            "code": "while j >= 0 and key < arr[j]",
            "indent": 1
        },
        {
            "code": "arr[j+1] = arr[j]",
            "indent": 2
        },
        {
            "code": "j = j - 1",
            "indent": 2
        },
        {
            "code": "arr[j+1] = key",
            "indent": 1
        }
    ],
    "MergeSort": [
        {
            "code": "def doMerge(array, tempArr, start, end):",
            "indent": 0
        },
        {
            "code": "i = start",
            "indent": 1
        },
        {
            "code": "j = mid+1",
            "indent": 1
        },
        {
            "code": "k = start",
            "indent": 1
        },
        {
            "code": "while i <= mid and j <= end:",
            "indent": 1
        },
        {
            "code": "if tempArr[i] <= tempArr[j]:",
            "indent": 2
        },
        {
            "code": "array[k] = tempArray[i]",
            "indent": 3
        },
        {
            "code": "i += 1",
            "indent": 3
        },
        {
            "code": "k += 1",
            "indent": 3
        },
        {
            "code": "if tempArr[i] > tempArr[j]:",
            "indent": 2
        },
        {
            "code": "array[k] = tempArray[j]",
            "indent": 3
        },
        {
            "code": "j += 1",
            "indent": 3
        },
        {
            "code": "k += 1",
            "indent": 3
        },
        {
            "code": "while i <= mid:",
            "indent": 1
        },
        {
            "code": "array[k] = tempArray[i]",
            "indent": 2
        },
        {
            "code": "i += 1",
            "indent": 2
        },
        {
            "code": "k += 1",
            "indent": 2
        },
        {
            "code": "while j <= end:",
            "indent": 1
        },
        {
            "code": "array[k] = tempArray[j]",
            "indent": 2
        },
        {
            "code": "j += 1",
            "indent": 2
        },
        {
            "code": "k += 1",
            "indent": 2
        },
        {
            "code": "",
            "indent": 1
        },
        {
            "code": "",
            "indent": 1
        },
        {
            "code": "tempArr = array.copy()",
            "indent": 0
        },
        {
            "code": "def Merge(array, tempArr, start, end):",
            "indent": 0
        },
        {
            "code": "if start == end:",
            "indent": 1
        },
        {
            "code": "return",
            "indent": 2
        },
        {
            "code": "mid = (start+end)//2",
            "indent": 1
        },
        {
            "code": "Merge(array, tempArr, start, mid)",
            "indent": 1
        },
        {
            "code": "Merge(array, tempArr, mid, end)",
            "indent": 1
        },
        {
            "code": "doMerge(array, tempArr, start, mid, end)",
            "indent": 1
        }
    ],
    "QuickSort": [
        {
            "code": "def partition(arr, low, high):",
            "indent": 0
        },
        {
            "code": "pivot = arr[high]",
            "indent": 1
        },
        {
            "code": "i = low - 1",
            "indent": 1
        },
        {
            "code": "for j in range(low, high):",
            "indent": 1
        },
        {
            "code": "if arr[j] <= pivot:",
            "indent": 2
        },
        {
            "code": "i += 1",
            "indent": 3
        },
        {
            "code": "arr[i], arr[j] = arr[j], arr[i]",
            "indent": 3
        },
        {
            "code": "arr[i+1], arr[high] = arr[high], arr[i+1]",
            "indent": 1
        },
        {
            "code": "return i+1",
            "indent": 1
        },
        {
            "code": "",
            "indent": 1
        },
        {
            "code": "",
            "indent": 1
        },
        {
            "code": "low, high = 0, len(arr)-1",
            "indent": 0
        },
        {
            "code": "def QuickSort(arr, low, high):",
            "indent": 0
        },
        {
            "code": "if low >= high:",
            "indent": 1
        },
        {
            "code": "return",
            "indent": 2
        },
        {
            "code": "pi = partition(arr, low, high)",
            "indent": 1
        },
        {
            "code": "QuickSort(arr, low, pi-1)",
            "indent": 1
        },
        {
            "code": "QuickSort(arr, pi+1, high)",
            "indent": 1
        }
    ],
    "SelectionSort": [
        {
            "code": "n = len(arr)",
            "indent": 0
        },
        {
            "code": "for step in range(n):",
            "indent": 0
        },
        {
            "code": "min_idx = step",
            "indent": 1
        },
        {
            "code": "for i in range(step+1, n):",
            "indent": 1
        },
        {
            "code": "if arr[i] < arr[min_idx]:",
            "indent": 2
        },
        {
            "code": "min_idx = i",
            "indent": 3
        },
        {
            "code": "array[step], array[min_idx] = array[min_idx], array[step]",
            "indent": 1
        }
    ],
    "LinearSearch": [
        {
            "code": "n = len(arr)",
            "indent": 0
        },
        {
            "code": "key = 40",
            "indent": 0
        },
        {
            "code": "flag = 0",
            "indent": 0
        },
        {
            "code": "for i in range(n):",
            "indent": 0
        },
        {
            "code": "if key == arr[i]:",
            "indent": 1
        },
        {
            "code": "flag = 1",
            "indent": 2
        },
        {
            "code": "print('Element Found')",
            "indent": 2
        },
        {
            "code": "break",
            "indent": 2
        },
        {
            "code": "if flag == 0:",
            "indent": 0
        },
        {
            "code": "print('Element Not Found')",
            "indent": 1
        }
    ],
    "BinarySearch": [
        {
            "code": "# Array should be sorted",
            "indent": 0
        },
        {
            "code": "# to perform binary search",
            "indent": 0
        },
        {
            "code": "n = len(arr)",
            "indent": 0
        },
        {
            "code": "key = 40",
            "indent": 0
        },
        {
            "code": "flag = 0",
            "indent": 0
        },
        {
            "code": "low = 0",
            "indent": 0
        },
        {
            "code": "high = n - 1",
            "indent": 0
        },
        {
            "code": "while low <= high:",
            "indent": 0
        },
        {
            "code": "mid = (low+high)//2",
            "indent": 1
        },
        {
            "code": "if arr[mid] < key:",
            "indent": 1
        },
        {
            "code": "low = mid + 1",
            "indent": 2
        },
        {
            "code": "elif arr[mid] > key:",
            "indent": 1
        },
        {
            "code": "high = mid - 1",
            "indent": 2
        },
        {
            "code": "elif arr[mid] == key:",
            "indent": 1
        },
        {
            "code": "flag = 1",
            "indent": 2
        },
        {
            "code": "print('Element Found')",
            "indent": 2
        },
        {
            "code": "break",
            "indent": 2
        },
        {
            "code": "if flag == 0:",
            "indent": 0
        },
        {
            "code": "print('Element Not Found')",
            "indent": 1
        }
    ],
    "Seive": [
        {
            "code": "N = 100",
            "indent": 0
        },
        {
            "code": "p = [0]*(N+5)",
            "indent": 0
        },
        {
            "code": "primes = []",
            "indent": 0
        },
        {
            "code": "for i in range(2, N+1):",
            "indent": 0
        },
        {
            "code": "if p[i] == 0:",
            "indent": 1
        },
        {
            "code": "primes.append(i)",
            "indent": 2
        },
        {
            "code": "for j in range(i*i, N+1, i):",
            "indent": 2
        },
        {
            "code": "p[j] = 1",
            "indent": 3
        },
        {
            "code": "for i in range(len(primes)):",
            "indent": 0
        },
        {
            "code": "print(primes[i], end=' ')",
            "indent": 1
        },
        {
            "code": "print()",
            "indent": 0
        }
    ]
}